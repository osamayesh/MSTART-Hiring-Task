// <auto-generated />
using System;
using MSTART_Hiring_Task.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MSTART_Hiring_Task.Migrations
{
    [DbContext(typeof(MstartContext))]
    [Migration("20230706214734_intialcreate")]
    partial class intialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MSTART_Hiring_Task.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Account_Number");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<DateTime>("DateTimeUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("DateTime_UTC");

                    b.Property<DateTime>("ServerDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Server_DateTime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTimeUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("Update_DateTime_UTC");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("currency")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__3214EC277C5010B3");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1")
                        .IsUnique()
                        .HasFilter("[UserId1] IS NOT NULL");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("MSTART_Hiring_Task.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Of_Birth");

                    b.Property<DateTime>("DateTimeUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("DateTime_UTC");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime>("ServerDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Server_DateTime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTimeUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("Update_DateTime_UTC");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC27847379C6");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MSTART_Hiring_Task.Models.Account", b =>
                {
                    b.HasOne("MSTART_Hiring_Task.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Account__User_ID__398D8EEE");

                    b.HasOne("MSTART_Hiring_Task.Models.User", null)
                        .WithOne("Account")
                        .HasForeignKey("MSTART_Hiring_Task.Models.Account", "UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MSTART_Hiring_Task.Models.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
